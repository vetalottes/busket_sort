#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
using namespace std;
// функция блочной сортировки
void bucketSort(int arr[], int n) {

    // 0) Определяем минимум и максимум среди элементов
    if (arr == 0 || n < 2)
        return; // если массив нулевой или состоит из 1 элемента, то возвращаем обратно, не меняя
    int max = arr[0];
    int min = arr[0];
    for (int i = 0; i < n; i++)
    {
        if (arr[i] > max)
            max = arr[i];
        if (arr[i] < min)
            min = arr[i];
    }
    int k = (max - min) / n;

    // 1) Создаём n пустых корзин 
    vector<int> *b = new vector<int>[n];
    int bi; //отвечает за индекс (номер) корзины

    // 2) Раскладываем элементы массива по соответствующим корзинам
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            bi = 0;
            if (j != n - 1) {
                if (arr[i] >= 1 + j * k && arr[i] <= 1 + (j + 1) * k) {
                    bi = j;
                }
            }
            else {
                if (arr[i] >= 1 + (j + 1) * k)
                    bi = n - 1;
            }
        }
        // push_back() используется для добавления нового элемента в конец вектора
        b[bi].push_back(arr[i]);
    }

    // 3) Сортируем отдельные корзины любой сортировкой
    for (int i = 0; i < n; i++)
        //функция sort: её принцип работы построен на алгоритме быстрой сортировки 
        sort(b[i].begin(), b[i].end());

    // 4) Соединяем отсортированные корзины в единый окончательный массив
    int index = 0; //отвечает за индекс элементов массива
    for (int i = 0; i < n; i++)
        // size() определяет текущий размер вектора
        for (int j = 0; j < b[i].size(); j++)
            arr[index++] = b[i][j];
    delete[] b;
}

int main() {
    setlocale(LC_ALL, "Rus");
    int arr[] = { 3, 27, 37, 16, 8, 28, 13, 9, 38, 7, 39, 1, 11, 20, 16, 36, 19, 32, 6, 34 };
    // операция sizeof предназначена для определения размера типа данных
    // она полезна, когда необходимо динамически выделить память для переменных
    int n = sizeof(arr) / sizeof(arr[0]);
    bucketSort(arr, n);
    cout << "Отсортированный массив:  \n";
    // выводим отсортированный массив
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}
